!function(factory){"use strict";"function"==typeof define&&define.amd?define(["jquery","angular","./jquery.fileupload-image","./jquery.fileupload-audio","./jquery.fileupload-video","./jquery.fileupload-validate"],factory):factory()}(function(){"use strict";angular.module("blueimp.fileupload",[]).provider("fileUpload",function(){var scopeEvalAsync=function(expression){var scope=angular.element(this).fileupload("option","scope");scope.$evalAsync(expression)},addFileMethods=function(scope,data){var files=data.files,file=files[0];angular.forEach(files,function(file,index){file._index=index;file.$state=function(){return data.state()};file.$processing=function(){return data.processing()};file.$progress=function(){return data.progress()};file.$response=function(){return data.response()}});file.$submit=function(){if(!file.error)return data.submit()};file.$cancel=function(){return data.abort()}},$config;$config=this.defaults={handleResponse:function(e,data){var files=data.result&&data.result.files;files?data.scope.replace(data.files,files):(data.errorThrown||"error"===data.textStatus)&&(data.files[0].error=data.errorThrown||data.textStatus)},add:function(e,data){if(e.isDefaultPrevented())return!1;var scope=data.scope,filesCopy=[];angular.forEach(data.files,function(file){filesCopy.push(file)});scope.$apply(function(){addFileMethods(scope,data);var method=scope.option("prependFiles")?"unshift":"push";Array.prototype[method].apply(scope.queue,data.files)});data.process(function(){return scope.process(data)}).always(function(){scope.$apply(function(){addFileMethods(scope,data);scope.replace(filesCopy,data.files)})}).then(function(){(scope.option("autoUpload")||data.autoUpload)&&data.autoUpload!==!1&&data.submit()})},progress:function(e,data){if(e.isDefaultPrevented())return!1;data.scope.$apply()},done:function(e,data){if(e.isDefaultPrevented())return!1;var that=this;data.scope.$apply(function(){data.handleResponse.call(that,e,data)})},fail:function(e,data){if(e.isDefaultPrevented())return!1;var that=this,scope=data.scope;"abort"!==data.errorThrown?scope.$apply(function(){data.handleResponse.call(that,e,data)}):scope.clear(data.files)},stop:scopeEvalAsync,processstart:scopeEvalAsync,processstop:scopeEvalAsync,getNumberOfFiles:function(){var scope=this.scope;return scope.queue.length-scope.processing()},dataType:"json",autoUpload:!1};this.$get=[function(){return{defaults:$config}}]}).provider("formatFileSizeFilter",function(){var $config={units:[{size:1e9,suffix:" GB"},{size:1e6,suffix:" MB"},{size:1e3,suffix:" KB"}]};this.defaults=$config;this.$get=function(){return function(bytes){if(!angular.isNumber(bytes))return"";for(var unit=!0,i=0,prefix,suffix;unit;){unit=$config.units[i];prefix=unit.prefix||"";suffix=unit.suffix||"";if(i===$config.units.length-1||bytes>=unit.size)return prefix+(bytes/unit.size).toFixed(2)+suffix;i+=1}}}}).controller("FileUploadController",["$scope","$element","$attrs","$window","fileUpload",function($scope,$element,$attrs,$window,fileUpload){var uploadMethods={progress:function(){return $element.fileupload("progress")},active:function(){return $element.fileupload("active")},option:function(option,data){if(1===arguments.length)return $element.fileupload("option",option);$element.fileupload("option",option,data)},add:function(data){return $element.fileupload("add",data)},send:function(data){return $element.fileupload("send",data)},process:function(data){return $element.fileupload("process",data)},processing:function(data){return $element.fileupload("processing",data)}};$scope.disabled=!$window.jQuery.support.fileInput;$scope.queue=$scope.queue||[];$scope.clear=function(files){var queue=this.queue,i=queue.length,file=files,length=1;if(angular.isArray(files)){file=files[0];length=files.length}for(;i;){i-=1;if(queue[i]===file)return queue.splice(i,length)}};$scope.replace=function(oldFiles,newFiles){var queue=this.queue,file=oldFiles[0],i,j;for(i=0;i<queue.length;i+=1)if(queue[i]===file){for(j=0;j<newFiles.length;j+=1)queue[i+j]=newFiles[j];return}};$scope.applyOnQueue=function(method){var list=this.queue.slice(0),i,file;for(i=0;i<list.length;i+=1){file=list[i];file[method]&&file[method]()}};$scope.submit=function(){this.applyOnQueue("$submit")};$scope.cancel=function(){this.applyOnQueue("$cancel")};angular.extend($scope,uploadMethods);$element.fileupload(angular.extend({scope:$scope},fileUpload.defaults)).on("fileuploadadd",function(e,data){data.scope=$scope}).on("fileuploadfail",function(e,data){if("abort"!==data.errorThrown&&data.dataType&&data.dataType.indexOf("json")===data.dataType.length-4)try{data.result=angular.fromJson(data.jqXHR.responseText)}catch(ignore){}}).on(["fileuploadadd","fileuploadsubmit","fileuploadsend","fileuploaddone","fileuploadfail","fileuploadalways","fileuploadprogress","fileuploadprogressall","fileuploadstart","fileuploadstop","fileuploadchange","fileuploadpaste","fileuploaddrop","fileuploaddragover","fileuploadchunksend","fileuploadchunkdone","fileuploadchunkfail","fileuploadchunkalways","fileuploadprocessstart","fileuploadprocess","fileuploadprocessdone","fileuploadprocessfail","fileuploadprocessalways","fileuploadprocessstop"].join(" "),function(e,data){$scope.$emit(e.type,data).defaultPrevented&&e.preventDefault()}).on("remove",function(){var method;for(method in uploadMethods)uploadMethods.hasOwnProperty(method)&&delete $scope[method]});$scope.$watch($attrs.fileUpload,function(newOptions){newOptions&&$element.fileupload("option",newOptions)})}]).controller("FileUploadProgressController",["$scope","$attrs","$parse",function($scope,$attrs,$parse){var fn=$parse($attrs.fileUploadProgress),update=function(){var progress=fn($scope);progress&&progress.total&&($scope.num=Math.floor(progress.loaded/progress.total*100))};update();$scope.$watch($attrs.fileUploadProgress+".loaded",function(newValue,oldValue){newValue!==oldValue&&update()})}]).controller("FileUploadPreviewController",["$scope","$element","$attrs",function($scope,$element,$attrs){$scope.$watch($attrs.fileUploadPreview+".preview",function(preview){$element.empty();preview&&$element.append(preview)})}]).directive("fileUpload",function(){return{controller:"FileUploadController",scope:!0}}).directive("fileUploadProgress",function(){return{controller:"FileUploadProgressController",scope:!0}}).directive("fileUploadPreview",function(){return{controller:"FileUploadPreviewController"}}).directive("download",function(){return function(scope,elm){elm.on("dragstart",function(e){try{e.originalEvent.dataTransfer.setData("DownloadURL",["application/octet-stream",elm.prop("download"),elm.prop("href")].join(":"))}catch(ignore){}})}})});